import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const projectRoot = path.join(__dirname, '..');
const distIndex = path.join(projectRoot, 'dist/index.js');
const pkg = JSON.parse(fs.readFileSync(path.join(projectRoot, 'package.json'), 'utf8'));

const subpaths = Object.keys(pkg.exports).filter(k => k !== '.' && !k.startsWith('./package'));

console.log('fix-exports.mjs debug: subpaths and selfImport values:');
subpaths.forEach(sp => {
  const selfImport = (sp === '.' || sp === './' || sp === './index')
    ? pkg.name
    : `${pkg.name}/${sp.replace(/^\.\//, '')}`;
  console.log(`  subpath: '${sp}' => selfImport: '${selfImport}'`);
});

// Only rewrite dist/index.js for ESM subpath re-exports; do not touch other dist files.
const lines = subpaths.map(sp => {
  const selfImport = (sp === '.' || sp === './' || sp === './index')
    ? pkg.name
    : `${pkg.name}/${sp.replace(/^\.+\//, '')}`;
  return `export * from '${selfImport}';`;
});

lines.unshift('// Auto-generated by scripts/fix-exports.mjs');

fs.writeFileSync(distIndex, lines.join('\n') + '\n');

// Only rewrite dist/index.js for ESM subpath re-exports; do not touch other dist files.
const distDir = path.join(projectRoot, 'dist');
const distFiles = fs.readdirSync(distDir).filter(f => f.endsWith('.js') && f !== 'index.js');

// Helper: map './core.js' => '@variablesoftware/vs-brand-utils/core'
function getSelfImportPath(relPath) {
  if (!relPath.startsWith('./') || !relPath.endsWith('.js')) return relPath;
  const mod = relPath.slice(2, -3); // remove './' and '.js'
  return `${pkg.name}/${mod}`;
}

distFiles.forEach(file => {
  const filePath = path.join(distDir, file);
  let content = fs.readFileSync(filePath, 'utf8');
  // Replace import/export from './mod' or './mod.js' with self-import (single/double quotes, any whitespace)
  content = content.replace(/(import\s+[^'";]+['"])(\.\/[a-zA-Z0-9_-]+)(\.js)?(['"])/g, (m, pre, rel, ext, post) => {
    return pre + getSelfImportPath(rel + (ext || '.js')) + post;
  });
  content = content.replace(/(export\s+\*\s+from\s+['"])(\.\/[a-zA-Z0-9_-]+)(\.js)?(['"])/g, (m, pre, rel, ext, post) => {
    return pre + getSelfImportPath(rel + (ext || '.js')) + post;
  });
  fs.writeFileSync(filePath, content);
});
